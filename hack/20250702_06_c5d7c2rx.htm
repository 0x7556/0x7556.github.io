<!DOCTYPE html><html lang=zh><head><meta charset=UTF-8><meta http-equiv=X-UA-Compatible content="IE=edge"><meta name=renderer content=webkit><meta name=viewport content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"><title>18K软件 AI工具 免费资源</title><link rel=stylesheet href=/css/style.css><link rel=stylesheet href=/libs/highlight/styles/18k.css><meta name=generator content="Hexo 7.3.0"></head><body id=bodyx><div class="hd posts"><a href=javascript:history.back() class=replay-btn>返回</a><div class=post-title><p>Critical RCE Vulnerability in Anthropic MCP Inspector - CVE-2025-49596</p><hr></div><div class=post-content><h2 id=Executive-Summary><a href=#Executive-Summary class=headerlink title="Executive Summary"></a><strong>Executive Summary</strong></h2><p>Oligo Security Research reported a Remote Code Execution (RCE) vulnerability and DNS rebinding in the <a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector>MCP Inspector project</a> to Anthropic, leading to <a target=_blank rel=noopener href=https://nvd.nist.gov/vuln/detail/CVE-2025-49596>CVE-2025-49596</a> being issued, with a Critical CVSS Score of 9.4.</p><p>This is one of the first critical RCEs in Anthropicâs MCP ecosystem, exposing a new class of browser-based attacks against AI developer tools. With code execution on a developerâs machine, attackers can steal data, install backdoors, and move laterally across networks - highlighting serious risks for AI teams, open-source projects, and enterprise adopters relying on MCP.</p><p>When a victim visits a malicious website, the vulnerability allows attackers to run arbitrary code on the visiting host running the official MCP inspector tool that is used by default in many use cases.</p><p><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_10.jpg></p><p>Star history of the <a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector>MCP Inspector</a></p><p>We would like to thank <a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector/commit/50df0e1ec488f3983740b4d28d2a968f12eb8979#diff-c299744f73df4daa7a22854dda2023b68bfc8a5d59d8fb90b3a53b0c2842d807R98-R101>Anthropic for promptly fixing</a> the vulnerability in <strong>version 0.14.1</strong> of the <a target=_blank rel=noopener href=https://modelcontextprotocol.io/docs/tools/inspector>MCP Inspector</a>, and for <a target=_blank rel=noopener href="https://github.com/modelcontextprotocol/inspector?tab=readme-ov-file#authentication">updating the projectâs documentation</a> accordingly.</p><p>In this article, we dive into the security of the MCP tooling and ecosystem, focusing on one <strong>significant attack vector:</strong> chaining the known <a target=_blank rel=noopener href=https://www.oligo.security/blog/0-0-0-0-day-exploiting-localhost-apis-from-the-browser>0.0.0.0-day logical flaw</a> with a new vulnerability in the MCP inspector, to take over a developerâs machine, without being on the same network through the browser.</p><h2 id=A-few-words-on-MCP><a href=#A-few-words-on-MCP class=headerlink title="A few words on MCP"></a><strong>A few words on MCP</strong></h2><p>The Model Context Protocol (MCP) is a communication framework designed to connect agents and tools, facilitating real-time collaboration and operation. <a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/servers/tree/main>MCP servers</a> are APIs that enable interaction between real-world systems, running either on cloud infrastructures or locally on developersâ machines, using the MCP protocol. The most common languages for MCP servers are Python and JavaScript, with many open-source implementations hosted on GitHub, pioneered by Anthropic and used by almost everyone in 2025: from <a target=_blank rel=noopener href=https://developer.microsoft.com/en-us/windows/agentic/ >Windows</a> to <a target=_blank rel=noopener href=https://openai.github.io/openai-agents-python/mcp/ >OpenAI</a>.</p><p>MCP servers use client libraries provided by Anthropic, and they allow for interactions across a variety of platforms, establishing connections between agents (machines or services) and tools. A complementary protocol known as A2A (Agent to Agent) connects agents to each other, increasing the utility of the system. In this blog, we will focus on MCP which is the backbone that connects AI agents with their tools. Before MCP, a similar concept existed for a while, and it wasÂ  tool&#x2F;function calling (without the server part - directly executed through application code). MCP helps delegate this work to remote servers.</p><p>Developers use MCP servers to create secure, efficient communication pipelines that integrate various tools and agents.Â</p><h2 id=Debugging-Testing-MCP-Servers-MCP-Inspector><a href=#Debugging-Testing-MCP-Servers-MCP-Inspector class=headerlink title="Debugging &amp; Testing MCP Servers: MCP Inspector"></a><strong>Debugging &amp; Testing MCP Servers: MCP Inspector</strong></h2><p>There are many open source <a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/servers>official MCP servers implementations</a>as well as <a target=_blank rel=noopener href=https://github.com/punkpeye/awesome-mcp-servers>community maintained MCP servers</a>. Developers are running these servers using Anthropicâs <a target=_blank rel=noopener href=https://github.com/modelcontextprotocol>official tooling</a>.</p><p>The <a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector>MCP Inspector</a> is an official tool from Anthropic that consists of two main components that work together:</p><ul><li>MCP Inspector Client (MCPI): A React-based web UI that provides an interactive interface for testing and debugging MCP servers</li><li><strong>MCP Proxy</strong> (MCPP): A Node.js server that acts as a protocol bridge, connecting the web UI to MCP servers via various transport methods (stdio, SSE, streamable-http)</li></ul><p>By following the quickstart guide provided in MCP’s official documentation, developers can get their servers up and running, which in turn allows for the execution of commands, file handling, and data flow in a seamless manner. However, the default settings exposed developers to significant security risks.</p><p>â</p><p><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_11.jpg></p><h2 id=How-Open-Source-Projects-Use-the-MCP-Inspector><a href=#How-Open-Source-Projects-Use-the-MCP-Inspector class=headerlink title="How Open Source Projects Use the MCP Inspector"></a><strong>How Open Source Projects Use the MCP Inspector</strong></h2><p>Many open-source projects leverage MCP to streamline interactions between agents. One notable use case is in AI development, where tools like the MCP Inspector can monitor and debug interactions within the MCP ecosystem. This tool is vital for developers seeking to trace, debug, and optimize communications between agents and tools, but it can also open the door to security risks if improperly configured.</p><p><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_12.jpg><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_13.jpg></p><p>The quickstart documentation in official Anthropicâs MCP Python SDK encourages developers to run the âmcp devâ command.</p><p>The <a target=_blank rel=noopener href=https://www.npmjs.com/package/@modelcontextprotocol/inspector>MCP Inspector tool</a> runs by default when the <a target=_blank rel=noopener href="https://github.com/search?q=%22mcp+dev+%22&type=code">mcp dev command is executed</a>. It acts as an HTTP server that listens for connections, with a default setup that does not include sufficient security measures like authentication or encryption. This misconfiguration creates a significant attack surface, as anyone with access to the local network or public internet can potentially interact with and exploit these servers.</p><p><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_14.jpg></p><p>Also, it states that it should only be running on trusted networks, such as âlocalhostâ. It should not be exposed to other computers on the network (and neither Websites should be able to communicate with it using the browser).</p><p>Anthropic’s involvement in the development and management of the MCP ecosystem has led to improvements in the tools provided, but it also exposes certain weaknesses. The vulnerability weâre discussing - related to the lack of default authorization in the MCP Inspector - highlights the importance of improving security as the ecosystem evolves.</p><h2 id=Who-is-using-the-MCP-inspector><a href=#Who-is-using-the-MCP-inspector class=headerlink title="Who is using the MCP inspector?"></a><strong>Who is using the MCP inspector?</strong></h2><p>Major tech companies like Microsoft and Google are increasingly using MCP-related technologies, especially in the realm of AI and cloud-based services. However, the same vulnerabilities that plague open-source projects are also a concern for large enterprises.</p><p><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_15.jpg><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_16.jpg><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_17.jpg><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_18.jpg></p><p>As part of ongoing efforts to ensure the safety of their users, companies must address the issues inherent in such open protocols. These organizations are beginning to recognize the need to include security features like authentication, encryption, and robust access controls, although the ecosystem remains in early stages of maturation.</p><h2 id=0-0-0-0-day-in-2025-Still-Unpatched-in-Chromium-and-Firefox><a href=#0-0-0-0-day-in-2025-Still-Unpatched-in-Chromium-and-Firefox class=headerlink title="0.0.0.0-day in 2025: Still Unpatched in Chromium and Firefox"></a><strong>0.0.0.0-day in 2025: Still Unpatched in Chromium and Firefox</strong></h2><p>What if attackers could leverage the MCP buzz to target MCP developers? Well, itâs no longer a theory, it is possible.</p><p>The <a target=_blank rel=noopener href=https://en.wikipedia.org/wiki/0.0.0.0#0.0.0.0_day_exploit>0.0.0.0-day vulnerability</a> is an 19-year old vulnerability in all major browsers, which resides due to a lack of browser standardization - when it comes to requests that are being made to the private network.</p><p>The vulnerability stems from the inability of certain browsers to properly handle the IP address 0.0.0.0, which is often assumed to be secure because it points to localhost. Attackers can exploit this flaw by crafting a malicious website that sends requests to localhost services running on an MCP server, thereby gaining the ability to execute arbitrary commands on a developerâs machine.</p><p>Oligo Security <a target=_blank rel=noopener href=https://www.oligo.security/blog/0-0-0-0-day-exploiting-localhost-apis-from-the-browser>called out this flaw in 2024</a>. Despite the discovery and claims on fixes that are in progress, the vulnerability still remains unpatched in major browsers as of 2025. The IP 0.0.0.0 poses many developers at risk until a standard (RFC) will be available for the browsers to comply with and adhere to.</p><p>Localhost has been proved to be abused for years, from <a target=_blank rel=noopener href=https://www.oligo.security/blog/0-0-0-0-day-exploiting-localhost-apis-from-the-browser>eBay scanning visitorâs ports</a>.<br>Recent research called <a target=_blank rel=noopener href=https://localmess.github.io/ >localmess</a> proved Meta and Yandex have used it to fingerprint users (Web-to-App Tracking) in 2025.Â</p><h2 id=CVE-2025-49596-CVSS-Score-9-4-CSRF-in-MCP-Inspector-Leads-to-Remote-Code-ExecutionA><a href=#CVE-2025-49596-CVSS-Score-9-4-CSRF-in-MCP-Inspector-Leads-to-Remote-Code-ExecutionA class=headerlink title="CVE-2025-49596 (CVSS Score 9.4): CSRF in MCP-Inspector Leads to Remote Code ExecutionÂ"></a><strong>CVE-2025-49596 (CVSS Score 9.4): CSRF in MCP-Inspector Leads to Remote Code ExecutionÂ</strong></h2><p>One of the most serious concerns with this vulnerability is the Cross-Site Request Forgery (<strong>CSRF</strong>) <strong>attacks from public websites</strong> - dispatching malicious requests that can result in remote code execution on the MCP developer&#x2F;user machine - <strong>even if it is listening on localhost &#x2F;127.0.0.1</strong>.</p><p>Our payload will use the &#x2F;sse endpoint with stdio transport. this endpoint has a command query parameter which is the terminal command we would like to execute. Then, we can use the args parameter to pass arguments to that command in the following way:</p><ul><li><a target=_blank rel=noopener href="http://0.0.0.0:6277/sse?transportType=stdio&command=touch&args=/tmp/exploited-from-the-browser">http://0.0.0.0:6277/sse?transportType=stdio&amp;command=touch&amp;args=%2Ftmp%2Fexploited-from-the-browser</a></li></ul><p>When an attacker can craft a request to the MCP inspector from a public domain Javascript context. that request can trigger arbitrary commands on the victim’s machine - efecctivley gaining control over it.</p><p>The fact that the default configurations expose MCP servers to these kinds of attacks means that many developers may be inadvertently opening a backdoor to their machine.</p><p><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_19.jpg></p><p>An example attacker payload that uses 0.0.0.0 as target host, will look like this:<br>â</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">&lt;script&gt;<br>fetch(&quot;http://0.0.0.0:6277/sse?transportType=stdio&amp;command=touch&amp;args=%2Ftmp%2Fexploited-from-the-browser&quot;, &#123;<br>    &quot;headers&quot;: &#123;<br>        &quot;accept&quot;: &quot;*/*&quot;,<br>        &quot;accept-language&quot;: &quot;en-US,en;q=0.9&quot;, <br>        &quot;cache-control&quot;: &quot;no-cache&quot;,<br>        &quot;pragma&quot;: &quot;no-cache&quot;<br>    &#125;,<br>    &quot;referrer&quot;: &quot;http://127.0.0.1:6274/&quot;,<br>    &quot;referrerPolicy&quot;: &quot;strict-origin-when-cross-origin&quot;,<br>    &quot;body&quot;: null,<br>    &quot;method&quot;: &quot;GET&quot;,<br>    &quot;mode&quot;: &quot;no-cors&quot;,<br>    &quot;credentials&quot;: &quot;omit&quot;<br>&#125;)<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id=Internet-Facing-Servers><a href=#Internet-Facing-Servers class=headerlink title="Internet Facing Servers"></a><strong>Internet Facing Servers</strong></h2><p>The MCP Inspector tool has a unique fingerprint in the response, which makes it easier for attackers to identify. Internet facing servers are currently exposed to this attack.</p><p>We managed to identify MCP Inspector instances that are exposed to the internet and are in immediate risk of remote code execution.Â</p><p><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_20.jpg></p><h3 id=What-can-attackers-achieve><a href=#What-can-attackers-achieve class=headerlink title="What can attackers achieve?"></a>What can attackers achieve?</h3><p>By doing so, the attacker can gain full access to the host machine, and everything that is connected to it via network.</p><h2 id=Practical-Risks-Targeting-AI-Developers-and-MCP-Users><a href=#Practical-Risks-Targeting-AI-Developers-and-MCP-Users class=headerlink title="Practical Risks: Targeting AI Developers and MCP Users"></a><strong>Practical Risks: Targeting AI Developers and MCP Users</strong></h2><p>Letâs take a closer look at a scenario where an MCP inspector is being used, leading to an exploitation chain. A developer running or testing a local MCP server may follow the quickstart instructions, not realizing that by doing so, theyâre leaving their host vulnerable to attack.</p><p>For example, a malicious attacker could create a blog post containing a payload that targets MCP servers. Once the developer visits the page, the malicious JavaScript would dispatch a request to 0.0.0.0:6277, instructing the MCP Inspector proxy to execute arbitrary commands.</p><p>In the end, the attacker gains full access to the developerâs machine, compromising the integrity of their system and any data it contains, opening reverse shells - all from a public web page.</p><h2 id=Demo-MCP-Inspector-RCE-using-0-0-0-0><a href=#Demo-MCP-Inspector-RCE-using-0-0-0-0 class=headerlink title="Demo: MCP Inspector RCE using 0.0.0.0"></a><strong>Demo: MCP Inspector RCE using 0.0.0.0</strong></h2><p>In this section, we demonstrate how easy it is for an attacker to hijack an MCP inspector server running with default settings. By following the official quickstart guide and executing the mcp dev command, we open the server to remote code execution.</p><h3 id=Steps><a href=#Steps class=headerlink title=Steps:></a><strong>Steps:</strong></h3><ol><li>Run the command uv run mcp dev server.py</li><li>The command runs the MCP Inspector proxy in the background automatically. The server is listening on port 6277.</li><li>An attacker injects JavaScript into a malicious web page under a public domain.</li><li>The JS payload dispatches a request to 0.0.0.0:6277. The HTTP packet reaches the server, which then executes the attacker-controlled command.</li><li>Also, showed that the same attack can leverage DNS rebinding which is another attack vector, by creating a malicious DNS record that points to 0.0.0.0:6277Â  or 127.0.0.1:6277.</li></ol><h2 id=The-Fix><a href=#The-Fix class=headerlink title="The Fix"></a><strong>The Fix</strong></h2><p>We would like to thank Anthropic’s Security Team for fixing this issue. <em>â</em></p><blockquote><p><em>The MCP inspector is a developer tool for testing and debugging MCP servers. Versions of MCP Inspector below 0.14.1 are vulnerable to remote code execution due to lack of authentication between the Inspector client and proxy, allowing unauthenticated requests to launch MCP commands over stdio. Users should immediately upgrade to version 0.14.1 or later to address these vulnerabilities</em></p></blockquote><p><a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector/commit/50df0e1ec488f3983740b4d28d2a968f12eb8979#diff-c299744f73df4daa7a22854dda2023b68bfc8a5d59d8fb90b3a53b0c2842d807R98-R101>In this commit</a>, Anthropic added session token to the proxy by default. This approach is similar to the one of Jupyter notebooks. The session token makes sure only authorized clients can use the inspector - mitigating CSRF attacks.</p><ul><li>Before version 0.14.1 there were no session tokens or authorization:Â</li></ul><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">~/git/oligo-mcp/ [main*] uv run mcp dev oligo_readonly_server.py<br>Starting MCP inspector...<br>âï¸ Proxy server listening on port 6277<br>ð MCP Inspector is up and running at http://127.0.0.1:6274 ð<br><br></code></pre></td></tr></table></figure><p>â</p><p>In version 0.14.1 a session token is used by default:</p><ul><li>~&#x2F;git&#x2F;oligo-mcp&#x2F; [main*] uv run mcp dev oligo_readonly_server.py</li></ul><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">~/git/oligo-mcp/ [main*] uv run mcp dev oligo_readonly_server.py<br>Starting MCP inspector...<br>âï¸ Proxy server listening on 127.0.0.1:6277<br>ð Session token: 03b238d87a33aa56033344589ed2ae01cde3dfd9d396a51548bfc9b6cdfd8299<br>Use this token to authenticate requests or set DANGEROUSLY_OMIT_AUTH=true to disable auth<br><br>ð Open inspector with token pre-filled:<br>   http://localhost:6274/?MCP_PROXY_AUTH_TOKEN=03b238d87a33aa56033344589ed2ae01cde3dfd9d396a51548bfc9b6cdfd8299<br>   (Auto-open is disabled when authentication is enabled)<br><br>ð MCP Inspector is up and running at http://127.0.0.1:6274 ð<br><br></code></pre></td></tr></table></figure><p>The commit also added allowed origins verification, which mitigates the browser attack vectors completely, resolving the attack vector that was possible from public websites. Imagine reading a blog about MCP, and ending up being exploited from a public website. After this fix, when the server binds only on localhost, it will not accept connections from public websites (non-allowed origins).</p><p><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_21.jpg></p><p>Also, the security documentation was improved:</p><p><img src=http://www.18k.icu/images/20250702_06_c5d7c2rx/img_22.jpg></p><h2 id=Responsible-Disclosure-Timeline><a href=#Responsible-Disclosure-Timeline class=headerlink title="Responsible Disclosure Timeline"></a><strong>Responsible Disclosure Timeline</strong></h2><ul><li><p><strong>April 18, 2025</strong> - Oligo <a target=_blank rel=noopener href=https://hackerone.com/reports/3099732>Reported</a> the vulnerabilities to Anthropic, highlighting Remote Code Execution POC that is carried from a public website, by using the 0.0.0.0 IP address, with or without DNS rebinding (on modern browsers).</p><ul><li>Anthropic shared that another researcher reported the vulnerability on <strong>March 26, 2025</strong>, and confirmed that they are working on a fix.</li></ul></li><li><p><strong>June 13, 2025</strong></p><ul><li><a target=_blank rel=noopener href=https://nvd.nist.gov/vuln/detail/CVE-2025-49596>CVE-2025-49596</a> (CVSS Score 9.4) is published</li><li><a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector/security/advisories/GHSA-7f8r-222p-6f5g>GitHub Security Advisory</a> is published</li></ul></li></ul><h2 id=Looking-Forward-Should-I-panic><a href=#Looking-Forward-Should-I-panic class=headerlink title="Looking Forward - Should I panic?"></a><strong>Looking Forward - Should I panic?</strong></h2><p>The primary recommendation is to secure your MCP inspector by enabling authentication and check the hosts by default - which <strong>is</strong> now the default, <strong>in version 0.14.1</strong>.</p><p>MCP inspector is often installed globally on a developerâs machine, but some projects are managing their own MCP inspector installations. We recommend upgrading the inspector globally and in each project that installs it (under node_modules).Â</p><p>Make sure you are using the most recent version of the MCP inspector:</p><p>You can check which version is installed at the moment:</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">~/ npm list -g<br>âââ @modelcontextprotocol/inspector@0.10.0Â <br></code></pre></td></tr></table></figure><p>The patched version is 0.14.1. In such case, upgrade your MCP inspector:</p><figure class="highlight plaintext"><table><tr><td class=code><pre><code class="hljs plaintext">~/ npm install -g &quot;@modelcontextprotocol/inspector@^0.14.1&quot;<br></code></pre></td></tr></table></figure><h2 id=Conclusion><a href=#Conclusion class=headerlink title=Conclusion></a><strong>Conclusion</strong></h2><p>Localhost services may appear safe but are often exposed to the public internet due to network routing capabilities in browsers and MCP clients.Â</p><p>MCPâs official documentation was updated to educate users against 0.0.0.0 and DNS rebinding attacks targeting MCP inspector servers. The mitigation adds Authorization which was missing in the default prior to the fix, as well as verifying the Host and Origin headers in HTTP, making sure the client is really visiting from a known, trusted domain. Now, by default, the server blocks DNS rebinding and CSRF attacks.</p><p>The model context protocol is a great example of an open source with security in mind and care for its users:</p><ul><li><a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector>MCP Inspector</a> and <a target=_blank rel=noopener href=https://jupyter.org/ >Jupyter Notebook</a> default configurations include authorization by default using session-tokens.</li><li>On the contrary, some Open Source projects often end up highlighting security warnings and disclaimers in their documentation, which places the responsibility of securing the deployment on the userâs, and assuming users read the documentation - one of the many reasons why <a target=_blank rel=noopener href=https://www.oligo.security/blog/shining-a-light-on-shadow-vulnerabilities>Shadow Vulnerabilities</a> exist, as well real-world attacks like <a target=_blank rel=noopener href=https://www.oligo.security/blog/shadowray-attack-ai-workloads-actively-exploited-in-the-wild>ShadowRay</a> that we have caught in the wild.</li></ul><p>The MCP tooling ecosystem, being open-source, is still in its infancy, and we are happy. Until its security matures, developers should approach it with caution. <strong>Always read the docs.</strong></p><h2 id=References><a href=#References class=headerlink title=References></a><strong>References</strong></h2><ol><li><a target=_blank rel=noopener href=https://en.wikipedia.org/wiki/0.0.0.0#0.0.0.0_day_exploit>https://en.wikipedia.org/wiki/0.0.0.0#0.0.0.0_day_exploit</a></li><li><a target=_blank rel=noopener href=https://nvd.nist.gov/vuln/detail/CVE-2025-49596>https://nvd.nist.gov/vuln/detail/CVE-2025-49596</a></li><li><a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector>https://github.com/modelcontextprotocol/inspector</a></li><li><a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector/commit/50df0e1ec488f3983740b4d28d2a968f12eb8979#diff-c299744f73df4daa7a22854dda2023b68bfc8a5d59d8fb90b3a53b0c2842d807R98-R101>https://github.com/modelcontextprotocol/inspector/commit/50df0e1ec488f3983740b4d28d2a968f12eb8979#diff-c299744f73df4daa7a22854dda2023b68bfc8a5d59d8fb90b3a53b0c2842d807R98-R101</a></li><li><a target=_blank rel=noopener href=https://github.com/modelcontextprotocol/inspector/security/advisories/GHSA-7f8r-222p-6f5g>https://github.com/modelcontextprotocol/inspector/security/advisories/GHSA-7f8r-222p-6f5g</a></li><li><a target=_blank rel=noopener href=https://www.oligo.security/blog/0-0-0-0-day-exploiting-localhost-apis-from-the-browser>https://www.oligo.security/blog/0-0-0-0-day-exploiting-localhost-apis-from-the-browser</a></li><li><a target=_blank rel=noopener href=https://security.snyk.io/vuln/SNYK-UNMANAGED-CHROMIUM-7654159>https://security.snyk.io/vuln/SNYK-UNMANAGED-CHROMIUM-7654159</a></li><li><a target=_blank rel=noopener href=https://github.com/WebKit/WebKit/pull/29592/files>https://github.com/WebKit/WebKit/pull/29592/files</a></li><li><a target=_blank rel=noopener href=https://localmess.github.io/ >https://localmess.github.io/</a></li><li><a target=_blank rel=noopener href="https://www.youtube.com/watch?v=23Mz7qcRz50&amp;ab_channel=Mrgavyadha">https://www.youtube.com/watch?v=23Mz7qcRz50&amp;ab_channel=Mrgavyadha</a></li></ol></div></div><div class=footer id=footer><p>Copyright © 2025 <a class=flink target=_blank rel=noopener href=http://www.18k.icu>www.18k.icu</a> <label class="el-switch el-switch-green el-switch-sm" style=vertical-align:sub><input type=checkbox name=switch id=update_style> <span class=el-switch-style></span></label></p></div><input type=hidden id=web_style value=black> <input type=hidden id=valine_appid value=CmCti21ooOOIzFOhEyFkFvR0-gzGzoHsz> <input type=hidden id=valine_appKey value=FqiyUqbg7McKN2eG0MCewupf><script src=https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js></script><script src=/libs/highlight/highlight.pack.js></script><script src=/js/js.js></script><style>.v *{color:#698fca}.v .vlist .vcard .vhead .vsys{color:#3a3e4a}.v .vlist .vcard .vh .vmeta .vat{color:#638fd5}.v .vlist .vcard .vhead .vnick{color:#6ba1ff}.v a{color:#8696b1}.v .vlist .vcard .vhead .vnick:hover{color:#669bfc}</style><script>var _hmt=_hmt||[];(()=>{var e=document.createElement("script"),t=(e.src="https://hm.baidu.com/hm.js?eb7eb8199824646269cd262b46a87950",document.getElementsByTagName("script")[0]);t.parentNode.insertBefore(e,t)})()</script></body></html>